import {
  RunnableSequence,
  RunnableMap,
  RunnableLambda,
} from '@langchain/core/runnables';
import { PromptTemplate } from '@langchain/core/prompts';
import formatChatHistoryAsString from '../utils/formatHistory';
import { BaseMessage } from '@langchain/core/messages';
import { StringOutputParser } from '@langchain/core/output_parsers';
import type { BaseChatModel } from '@langchain/core/language_models/chat_models';
import crypto from 'crypto';
import { supabase } from '../db/supabase';

const EXCLUDE_TERMS = [
  'watermark',
  'shutterstock',
  'istockphoto',
  'photo by',
  'getty'
];

/**
 * Interface pour la cache d'images
 */
export interface ImageSearchCache {
  id?: string;
  query_text: string;
  query_hash: string;
  images?: any[];
  created_at?: string;
  last_accessed_at?: string;
  access_count?: number;
  expires_at: string;
}

const imageSearchChainPrompt = `
Vous √™tes un assistant qui aide √† trouver des images pertinentes pour les utilisateurs.
Votre t√¢che consiste simplement √† identifier des cat√©gories d'images potentiellement utiles.

Conversation :
{chat_history}

Question : {query}
Cat√©gories d'images possibles :`;

type ImageSearchChainInput = {
  chat_history: BaseMessage[];
  query: string;
};

const strParser = new StringOutputParser();

/**
 * R√©cup√®re une image al√©atoire depuis la base de donn√©es
 * @param tags Tags optionnels pour filtrer les images 
 * @returns Une image al√©atoire ou null si aucune n'est trouv√©e
 */
async function getRandomImageFromDatabase(
  tags?: string[]
): Promise<any | null> {
  try {
    console.log("üé≤ R√©cup√©ration d'une image al√©atoire depuis la base de donn√©es");
    
    // Construire la requ√™te de base
    let query = supabase
      .from('random_images')
      .select('*')
      .eq('active', true);
    
    // Ajouter un filtre par tag si fourni
    if (tags && tags.length > 0) {
      // On utilise "overlap" pour v√©rifier si au moins un des tags fournis est pr√©sent dans le tableau tags
      query = query.overlaps('tags', tags);
      console.log(`üè∑Ô∏è Filtrage par tags: ${tags.join(', ')}`);
    }
    
    // Finaliser la requ√™te
    const { data, error } = await query
      // Probl√®me: PostgREST n'accepte pas 'random()' dans order()
      // Utilisons une autre approche compatible avec Supabase
      .limit(100) // D'abord r√©cup√©rer un petit ensemble d'images
      .then(result => {
        if (result.error) return result;
        
        // Si pas d'erreur, m√©langer les r√©sultats en JavaScript
        const shuffled = result.data ? [...result.data].sort(() => Math.random() - 0.5) : [];
        
        // Prendre la premi√®re image du r√©sultat m√©lang√©
        return {
          data: shuffled.length > 0 ? shuffled[0] : null,
          error: null
        };
      });
    
    if (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration d'une image al√©atoire:", error);
      
      // Si la table n'existe pas ou autre erreur, on retourne null
      if (error.code === '42P01') { // relation "random_images" does not exist
        console.log("‚ÑπÔ∏è Table 'random_images' introuvable, retour null.");
      }
      
      return null; // Retourne null en cas d'erreur
    }
    
    if (!data) {
      console.log("‚ùì Aucune image al√©atoire trouv√©e");
      return null; // Retourne null si aucune donn√©e
    }
    
    console.log("‚úÖ Structure de l'image al√©atoire r√©cup√©r√©e:", JSON.stringify(data, null, 2));
    
    // Formatage simplifi√© avec seulement url et tags
    return {
      url: data.url || "https://images.unsplash.com/photo-1600880292089-90a7e086ee0c", // Garder une URL par d√©faut juste au cas o√π data.url serait vide
      alt: "Image al√©atoire",
      title: "Image al√©atoire",
      width: 800,
      height: 600,
      source: "random_database",
      tags: data.tags || [],
      img_src: data.url || "https://images.unsplash.com/photo-1600880292089-90a7e086ee0c" // Garder une URL par d√©faut juste au cas o√π data.url serait vide
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration d'une image al√©atoire:", error);
    return null; // Retourne null en cas d'exception
  }
}

const createImageSearchChain = (llm: BaseChatModel) => {
  return RunnableSequence.from([
    RunnableMap.from({
      chat_history: (input: ImageSearchChainInput) => {
        return formatChatHistoryAsString(input.chat_history);
      },
      query: (input: ImageSearchChainInput) => {
        return input.query;
      },
    }),
    // Ignorer l'analyse LLM et passer directement √† la r√©cup√©ration d'image al√©atoire
    RunnableLambda.from(async (input: any) => {
      try {
        console.log('üîç R√©cup√©ration d\'image al√©atoire, ignorant le contexte de la requ√™te');
        
        // Utiliser des tags g√©n√©riques sans analyser la requ√™te
        const tags = extractCategories("");
        console.log('üè∑Ô∏è Tags g√©n√©riques utilis√©s:', tags);
        
        // R√©cup√©rer une image al√©atoire de la base de donn√©es
        const randomImage = await getRandomImageFromDatabase(tags);
        
        // Si une image est trouv√©e, la retourner dans un tableau
        if (randomImage) {
          console.log('‚úÖ Image retourn√©e avec img_src:', randomImage.img_src || randomImage.url);
          return [randomImage];
        }
        
        // Si aucune image n'est trouv√©e, utiliser des images par d√©faut
        console.log('‚ö†Ô∏è Aucune image al√©atoire trouv√©e, utilisation des images par d√©faut.');
        return getDefaultImages();
      } catch (error) {
        console.error('‚ùå Erreur lors de la recherche d\'image:', error);
        return getDefaultImages();
      }
    }),
  ]);
};

/**
 * Extrait des cat√©gories potentielles √† partir du texte d'entr√©e
 * et les convertit en tags pour la recherche d'images
 * (Simplifi√© pour toujours retourner des tags g√©n√©riques)
 */
function extractCategories(input: string): string[] {
  // Retourner toujours des tags g√©n√©riques sans analyser le contexte
  return ['business', 'professional', 'team', 'technology', 'digital'];
}

const handleImageSearch = async (
  input: ImageSearchChainInput,
  llm: BaseChatModel,
) => {
  try {
    // V√©rifier d'abord si nous avons des r√©sultats en cache
    const cachedImages = await getImageSearchFromCache(input.query);
    if (cachedImages && cachedImages.length > 0) {
      console.log('‚úÖ Utilisation des r√©sultats du cache d\'images');
      return cachedImages;
    }
    
    // Si rien en cache, effectuer une nouvelle recherche
    console.log('üîç Pas de cache disponible, ex√©cution de la recherche...');
    const imageSearchChain = createImageSearchChain(llm);
    const results = await imageSearchChain.invoke(input);
    
    // Sauvegarder les r√©sultats dans le cache
    if (results && results.length > 0) {
      await saveImageSearchCache(input.query, results);
    }
    
    return results;
  } catch (error) {
    console.error('‚ùå Erreur dans handleImageSearch:', error);
    return getDefaultImages();
  }
};

/**
 * Nettoie les entr√©es de cache d'images expir√©es
 * @returns Un objet avec les statistiques de nettoyage
 */
export async function cleanupExpiredImageCache(): Promise<{ 
  imagesDeleted: number,
  success: boolean
}> {
  try {
    // Supprimer les entr√©es expir√©es de image_search_cache
    const { error, count } = await supabase
      .from('image_search_cache')
      .delete()
      .lt('expires_at', new Date().toISOString())
      .select('count');
    
    if (error) {
      console.error('Erreur lors du nettoyage du cache d\'images:', error);
      throw error;
    }
    
    return {
      imagesDeleted: count || 0,
      success: true
    };
  } catch (error) {
    console.error('Erreur lors du nettoyage du cache d\'images:', error);
    return {
      imagesDeleted: 0,
      success: false
    };
  }
}

/**
 * Sauvegarde les r√©sultats de recherche d'images dans le cache
 * @param query Le texte de la requ√™te originale
 * @param images Les images trouv√©es
 * @param expirationDays Nombre de jours avant expiration (d√©faut: 7)
 * @returns L'entr√©e de cache cr√©√©e ou null en cas d'erreur
 */
export async function saveImageSearchCache(
  query: string,
  images: any[],
  expirationDays: number = 7
): Promise<ImageSearchCache | null> {
  try {
    // G√©n√©rer un hash pour la requ√™te
    const queryHash = crypto
      .createHash('md5')
      .update(query.toLowerCase().trim())
      .digest('hex');
    
    // Calculer la date d'expiration
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + expirationDays);
    
    // Pr√©parer l'entr√©e de cache
    const cacheEntry: ImageSearchCache = {
      query_text: query,
      query_hash: queryHash,
      images: images,
      created_at: new Date().toISOString(),
      last_accessed_at: new Date().toISOString(),
      access_count: 1,
      expires_at: expiresAt.toISOString()
    };
    
    // Sauvegarder dans la base de donn√©es
    const { data, error } = await supabase
      .from('image_search_cache')
      .insert(cacheEntry)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erreur lors de la sauvegarde du cache d\'images:', error);
      return null;
    }
    
    console.log('‚úÖ Cache d\'images sauvegard√© avec succ√®s:', data.id);
    return data;
  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde du cache d\'images:', error);
    return null;
  }
}

/**
 * Cherche des images en cache pour une requ√™te donn√©e
 * @param query Le texte de la requ√™te
 * @returns Les images trouv√©es en cache ou null si non trouv√©es
 */
export async function getImageSearchFromCache(query: string): Promise<any[] | null> {
  try {
    // G√©n√©rer un hash pour la requ√™te
    const queryHash = crypto
      .createHash('md5')
      .update(query.toLowerCase().trim())
      .digest('hex');
    
    // Rechercher dans le cache
    const { data, error } = await supabase
      .from('image_search_cache')
      .select('*')
      .eq('query_hash', queryHash)
      .gt('expires_at', new Date().toISOString())
      .single();
    
    if (error || !data) {
      console.log('‚ÑπÔ∏è Aucun r√©sultat en cache pour cette requ√™te');
      return null;
    }
    
    // Mettre √† jour les statistiques d'acc√®s
    await supabase
      .from('image_search_cache')
      .update({
        last_accessed_at: new Date().toISOString(),
        access_count: (data.access_count || 0) + 1
      })
      .eq('id', data.id);
    
    console.log('‚úÖ R√©sultats trouv√©s en cache:', data.images?.length || 0, 'images');
    return data.images || [];
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche dans le cache d\'images:', error);
    return null;
  }
}

/**
 * Fournit des images par d√©faut lorsque la recherche √©choue
 * @returns Un tableau d'images par d√©faut
 */
function getDefaultImages(): any[] {
  console.log('üñºÔ∏è Utilisation d\'images par d√©faut');
  return [
    {
      url: "https://images.unsplash.com/photo-1600880292089-90a7e086ee0c",
      alt: "Image professionnelle par d√©faut",
      title: "Image par d√©faut",
      width: 800,
      height: 600,
      source: "default",
      tags: ["business", "professional", "default"],
      img_src: "https://images.unsplash.com/photo-1600880292089-90a7e086ee0c"
    }
  ];
}

export default handleImageSearch;