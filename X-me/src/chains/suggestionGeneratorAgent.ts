import { RunnableSequence, RunnableMap } from '@langchain/core/runnables';
import ListLineOutputParser from '../lib/outputParsers/listLineOutputParser';
import { PromptTemplate } from '@langchain/core/prompts';
import formatChatHistoryAsString from '../utils/formatHistory';
import { BaseMessage } from '@langchain/core/messages';
import { BaseChatModel } from '@langchain/core/language_models/chat_models';
import { ChatOpenAI } from '@langchain/openai';
import logger from '../utils/logger';

// Suggestions par domaine d'activit√© pour enrichir le contexte selon le sujet d√©tect√©
const DOMAIN_SPECIFIC_SUGGESTIONS = {
  cgv: [
    "Quelles clauses sp√©cifiques devrais-je inclure pour me prot√©ger contre les impay√©s ?",
    "Comment puis-je adapter mes CGV pour la vente en ligne internationale ?",
    "Quelles mentions sont l√©galement obligatoires pour mes CGV ?",
    "Comment puis-je int√©grer les r√®gles RGPD dans mes conditions g√©n√©rales ?",
    "Quelle est la dur√©e de validit√© recommand√©e pour mes CGV ?"
  ],
  creation_entreprise: [
    "Quelles sont les d√©marches administratives pour immatriculer mon entreprise ?",
    "Comment choisir entre le statut de micro-entrepreneur et celui de SASU ?",
    "Quels sont les frais de cr√©ation d'entreprise √† pr√©voir dans mon budget ?",
    "Comment prot√©ger ma marque et mon concept business ?",
    "Quelles sont les aides √† la cr√©ation d'entreprise auxquelles je pourrais pr√©tendre ?"
  ],
  financement: [
    "Comment puis-je calculer pr√©cis√©ment mon besoin en financement initial ?",
    "Quelles sont les alternatives au pr√™t bancaire pour mon projet ?",
    "Comment structurer mon dossier pour maximiser mes chances d'obtenir un financement ?",
    "Quels dispositifs d'aides publiques correspondent √† mon secteur d'activit√© ?",
    "Comment valoriser mon entreprise pour une lev√©e de fonds ?"
  ],
  marketing: [
    "Comment d√©finir ma strat√©gie de contenu pour attirer plus de clients ?",
    "Quels KPIs devrais-je suivre pour mesurer l'efficacit√© de mes actions marketing ?",
    "Comment optimiser mon budget marketing pour obtenir le meilleur ROI ?",
    "Quelles sont les tendances actuelles dans mon secteur d'activit√© ?",
    "Comment adapter ma communication pour chaque canal (r√©seaux sociaux, site web, etc.) ?"
  ],
  juridique: [
    "Quelles sont les implications juridiques de mon mod√®le d'affaires ?",
    "Comment prot√©ger ma propri√©t√© intellectuelle efficacement ?",
    "Quels types de contrats sont essentiels pour s√©curiser mes relations commerciales ?",
    "Quelles sont mes obligations l√©gales en mati√®re de conformit√© ?",
    "Comment structurer juridiquement mon entreprise pour optimiser ma fiscalit√© ?"
  ]
};

const suggestionGeneratorPrompt = `
Vous √™tes un expert en g√©n√©ration de suggestions pertinentes pour une IA d'assistance aux entrepreneurs et professionnels.

CONTEXTE:
L'utilisateur est engag√© dans une conversation avec une IA d'assistance professionnelle. Votre r√¥le est de proposer des questions de suivi particuli√®rement pertinentes que l'utilisateur pourrait poser pour approfondir sa d√©marche initiale.

CONVERSATION PR√âC√âDENTE:
{chat_history}

INSTRUCTIONS:
- Analysez le domaine d'activit√©, le secteur et les pr√©occupations principales qui ressortent de cette conversation.
- G√©n√©rez 4-5 suggestions de questions formul√©es √† la 1√®re personne (comme si l'utilisateur les posait).
- Les suggestions doivent se terminer par un point d'interrogation.
- Privil√©giez des questions pr√©cises, techniques et √† haute valeur ajout√©e professionnelle.
- Adaptez les suggestions au niveau de maturit√© du projet/de l'entreprise que vous d√©tectez.
- Int√©grez des termes et concepts sp√©cifiques au domaine d'activit√© identifi√©.
- Proposez des questions qui explorent diff√©rents aspects du sujet principal (aspects financiers, juridiques, op√©rationnels, etc.).

IMPORTANT: Retournez uniquement les questions, une par ligne, sans num√©rotation ni explications compl√©mentaires, entre les balises <suggestions> et </suggestions>.

<suggestions>
Comment puis-je calculer pr√©cis√©ment mon besoin en fonds de roulement pour les 6 premiers mois ?
Quelles sont les options de protection juridique pour mon concept innovant ?
Comment structurer ma politique tarifaire pour maximiser ma rentabilit√© ?
Quelles comp√©tences cl√©s devrais-je prioriser pour mes premiers recrutements ?
</suggestions>
`;

export type SuggestionGeneratorInput = {
  chat_history: BaseMessage[];
  existingExperts?: any[];
};

// Type pour le r√©sultat du parser
type SuggestionResult = string[] | { suggestions?: string[] } | Record<string, any>;

const outputParser = new ListLineOutputParser({
  key: 'suggestions',
});

const createSuggestionGeneratorChain = (llm: BaseChatModel) => {
  return RunnableSequence.from([
    RunnableMap.from({
      chat_history: (input: SuggestionGeneratorInput) =>
        formatChatHistoryAsString(input.chat_history),
    }),
    PromptTemplate.fromTemplate(suggestionGeneratorPrompt),
    llm,
    outputParser,
  ]);
};

/**
 * D√©tecte le domaine d'activit√© principal bas√© sur le contenu de la conversation
 * @param chatHistory Historique de la conversation
 * @returns Le domaine d√©tect√© ou undefined
 */
const detectDomain = (chatHistory: BaseMessage[]): string | undefined => {
  // Concat√©ner tout le contenu de la conversation pour l'analyse
  const fullContent = chatHistory
    .map(msg => msg.content?.toString() || '')
    .join(' ')
    .toLowerCase();
  
  // D√©tection simple bas√©e sur des mots-cl√©s
  if (fullContent.includes('cgv') || 
      fullContent.includes('conditions g√©n√©rales') || 
      fullContent.includes('conditions de vente')) {
    return 'cgv';
  }
  
  if (fullContent.includes('cr√©er une entreprise') || 
      fullContent.includes('cr√©ation d\'entreprise') || 
      fullContent.includes('immatriculation') ||
      fullContent.includes('statut juridique')) {
    return 'creation_entreprise';
  }
  
  if (fullContent.includes('financement') || 
      fullContent.includes('investissement') || 
      fullContent.includes('lev√©e de fond') ||
      fullContent.includes('pr√™t bancaire')) {
    return 'financement';
  }
  
  if (fullContent.includes('marketing') || 
      fullContent.includes('communication') || 
      fullContent.includes('publicit√©') ||
      fullContent.includes('client') ||
      fullContent.includes('vente')) {
    return 'marketing';
  }
  
  if (fullContent.includes('juridique') || 
      fullContent.includes('contrat') || 
      fullContent.includes('droit') ||
      fullContent.includes('l√©gal')) {
    return 'juridique';
  }
  
  return undefined;
};

/**
 * Enrichit les suggestions g√©n√©r√©es avec des suggestions sp√©cifiques au domaine
 * @param generatedSuggestions Suggestions g√©n√©r√©es par l'IA
 * @param domain Domaine d√©tect√©
 * @returns Suggestions enrichies
 */
const enrichSuggestionsWithDomain = (
  generatedSuggestions: string[], 
  domain?: string
): string[] => {
  if (!domain || !DOMAIN_SPECIFIC_SUGGESTIONS[domain]) {
    return generatedSuggestions;
  }
  
  const domainSuggestions = DOMAIN_SPECIFIC_SUGGESTIONS[domain];
  
  // Combiner les suggestions g√©n√©r√©es avec les suggestions sp√©cifiques au domaine
  const combined = [...generatedSuggestions];
  
  // Ajouter jusqu'√† 2 suggestions sp√©cifiques au domaine si nous n'avons pas assez de suggestions
  if (combined.length < 5) {
    const needed = 5 - combined.length;
    const additional = domainSuggestions
      .filter(sugg => !combined.some(s => s.toLowerCase().includes(sugg.toLowerCase().substring(0, 10))))
      .slice(0, needed);
    
    combined.push(...additional);
  }
  
  // Limiter √† 5 suggestions maximum
  return combined.slice(0, 5);
};

const generateSuggestions = async (
  input: SuggestionGeneratorInput,
  llm: BaseChatModel,
) => {
  try {
    logger.info(`üîç SuggestionGenerator - D√©marrage de la g√©n√©ration de suggestions`);
    logger.info(`üìã SuggestionGenerator - Historique: ${input.chat_history.length} messages, Experts: ${input.existingExperts?.length || 0}`);
    
    // Configurer le mod√®le LLM
    (llm as unknown as ChatOpenAI).temperature = 0.1; // Temp√©rature basse pour des suggestions plus pr√©cises
    const suggestionGeneratorChain = createSuggestionGeneratorChain(llm);
    
    // D√©tecter le domaine d'activit√©
    const detectedDomain = detectDomain(input.chat_history);
    logger.info(`üîç SuggestionGenerator - Domaine d√©tect√©: ${detectedDomain || 'aucun'}`);

    // Cas avec experts existants
    if (input.existingExperts && input.existingExperts.length > 0) {
      logger.info(`üë• SuggestionGenerator - Utilisation de ${input.existingExperts.length} experts existants`);
      
      try {
        const result = await suggestionGeneratorChain.invoke(input) as SuggestionResult;
        // Extraire les suggestions du r√©sultat
        let suggestions: string[] = [];
        
        if (Array.isArray(result)) {
          suggestions = result;
        } else if (typeof result === 'object' && result !== null) {
          if ('suggestions' in result && Array.isArray(result.suggestions)) {
            suggestions = result.suggestions;
          }
        }
        
        // Enrichir avec des suggestions sp√©cifiques au domaine
        const enrichedSuggestions = enrichSuggestionsWithDomain(suggestions, detectedDomain);
        
        logger.info(`‚úÖ SuggestionGenerator - G√©n√©r√© ${enrichedSuggestions.length} suggestions avec experts (${detectedDomain || 'domaine g√©n√©ral'})`);
        return enrichedSuggestions;
      } catch (chainError) {
        logger.error(`‚ùå SuggestionGenerator - Erreur lors de la g√©n√©ration avec experts: ${chainError.message}`);
        console.error('Erreur d√©taill√©e:', chainError);
        return [];
      }
    }
    
    // Cas sans experts (d√©faut)
    try {
      const result = await suggestionGeneratorChain.invoke(input) as SuggestionResult;
      // Extraire les suggestions du r√©sultat
      let suggestions: string[] = [];
      
      if (Array.isArray(result)) {
        suggestions = result;
      } else if (typeof result === 'object' && result !== null) {
        if ('suggestions' in result && Array.isArray(result.suggestions)) {
          suggestions = result.suggestions;
        }
      }
      
      // Enrichir avec des suggestions sp√©cifiques au domaine
      const enrichedSuggestions = enrichSuggestionsWithDomain(suggestions, detectedDomain);
      
      logger.info(`‚úÖ SuggestionGenerator - G√©n√©r√© ${enrichedSuggestions.length} suggestions sans experts (${detectedDomain || 'domaine g√©n√©ral'})`);
      return enrichedSuggestions;
    } catch (chainError) {
      logger.error(`‚ùå SuggestionGenerator - Erreur lors de la g√©n√©ration sans experts: ${chainError.message}`);
      console.error('Erreur d√©taill√©e:', chainError);
      return [];
    }
  } catch (error) {
    logger.error(`‚ùå SuggestionGenerator - Erreur g√©n√©rale: ${error.message}`);
    console.error('Erreur d√©taill√©e:', error);
    return [];
  }
};

export default generateSuggestions;