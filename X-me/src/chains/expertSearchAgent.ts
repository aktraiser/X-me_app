import { ChatPromptTemplate, PromptTemplate } from '@langchain/core/prompts';
import { BaseChatModel } from '@langchain/core/language_models/chat_models';
import {
  RunnableLambda,
  RunnableMap,
  RunnableSequence,
} from '@langchain/core/runnables';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { BaseMessage } from '@langchain/core/messages';
import { supabase } from '../db/supabase';
import formatChatHistoryAsString from '../utils/formatHistory';
import { Expert, ExpertSearchRequest, ExpertSearchResponse } from '../types/types';

type ExpertSearchChainInput = {
  chat_history: BaseMessage[];
  query: string;
};

const ExpertSearchChainPrompt = `
Vous √™tes un agent sp√©cialis√© dans l'analyse et la recherche d'experts professionnels. Votre r√¥le est d'interpr√©ter les demandes des utilisateurs et d'extraire les informations essentielles pour trouver l'expert le plus pertinent.

OBJECTIF :
Analyser la requ√™te pour identifier pr√©cis√©ment :
1. Le domaine d'expertise recherch√©
2. La localisation souhait√©e (si mentionn√©e)
3. Le service sp√©cifique demand√© (si mentionn√©)

R√àGLES D'EXTRACTION :
- Pour l'EXPERTISE :
  * Identifier le domaine principal (comptabilit√©, droit, marketing, etc.)
  * Reconna√Ætre les sp√©cialisations (droit des affaires, marketing digital, etc.)
  * Nettoyer les mots parasites (expert, sp√©cialiste, professionnel, etc.)
  * Extraire les mots-cl√©s pertinents pour la recherche
  * Prendre en compte les synonymes et variations

- Pour la VILLE :
  * Si mentionn√©e, extraire la ville mentionn√©e
  * Laisser vide si non sp√©cifi√©e
  * Ne jamais ajouter d'autres informations dans ce champ
  * Standardiser le format (tout en minuscules)

- Pour le SERVICE :
  * Identifier le type de service demand√© (conseil, accompagnement, formation, etc.)
  * Reconna√Ætre les besoins sp√©cifiques (cr√©ation d'entreprise, fiscalit√©, etc.)
  * Extraire les mots-cl√©s li√©s aux services
  * Ne pas confondre avec la ville

FORMAT DE R√âPONSE STRICT :
R√©pondre EXACTEMENT avec ce format, chaque √©l√©ment sur sa propre ligne :
expertise: [domaine d'expertise]
ville: [ville si mentionn√©e, sinon laisser vide]
service: [service si mentionn√©, sinon laisser vide]

EXEMPLES D'ANALYSE :

1. "Je cherche un expert comptable sur Paris pour m'aider avec ma d√©claration fiscale"
expertise: comptabilit√©
ville: paris
service: d√©claration fiscale

2. "Il me faudrait un avocat sp√©cialis√© en droit des affaires √† Lyon pour cr√©er ma soci√©t√©"
expertise: droit des affaires
ville: lyon
service: cr√©ation de soci√©t√©

3. "Qui peut m'aider avec le marketing digital pour ma boutique en ligne ?"
expertise: marketing digital
ville: 
service: strat√©gie e-commerce

4. "Je cherche quelqu'un pour m'aider √† cr√©er mon entreprise"
expertise: cr√©ation d'entreprise
ville: 
service: accompagnement entrepreneurial

Conversation pr√©c√©dente :
{chat_history}

Requ√™te actuelle : {query}

Principe de recherche d'expert :
- Pour toute recherche d'expert, extraire :
  * L'expertise demand√©e (avec ses variations et synonymes)
  * La ville (si mentionn√©e, sinon laisser vide)
  * Le service sp√©cifique (si mentionn√©, sinon laisser vide)

- Mots d√©clencheurs √† reconna√Ætre :
  * "cherche un expert/sp√©cialiste/consultant"
  * "besoin d'un professionnel"
  * "recherche quelqu'un pour"
  * "qui peut m'aider avec"
  * "conseil en"
  * "assistance pour"
  * "accompagnement dans"

- Domaines d'expertise √† reconna√Ætre :
  * Cr√©ation d'entreprise (entrepreneuriat, lancement d'activit√©, etc.)
  * Comptabilit√© (gestion comptable, fiscalit√©, etc.)
  * Marketing (digital, traditionnel, strat√©gie, etc.)
  * Droit (des affaires, commercial, fiscal, etc.)
  * Finance (gestion financi√®re, investissement, etc.)
  * Strat√©gie (d√©veloppement, business plan, etc.)
  * RH (ressources humaines, recrutement, etc.)
  * Communication (relations publiques, m√©dias, etc.)

<example>
\`<query>
Je cherche un expert comptable pour ma d√©claration d'imp√¥ts
</query>
expertise: comptabilit√©
ville: 
service: d√©claration d'imp√¥ts
\`

\`<query>
J'ai besoin d'un sp√©cialiste en droit des soci√©t√©s √† Lyon pour un accompagnement juridique
</query>
expertise: droit des soci√©t√©s
ville: lyon
service: accompagnement juridique
\`

\`<query>
Qui peut m'aider avec ma comptabilit√© sur Paris ?
</query>
expertise: comptabilit√©
ville: paris
service: 
\`
</example>
`;

const ExpertAnalysisPrompt = `
Vous devez g√©n√©rer une synth√®se des experts trouv√©s en vous basant UNIQUEMENT sur les donn√©es fournies.

Contexte de la recherche : {query}

Experts trouv√©s (√† utiliser EXCLUSIVEMENT) :
{experts}

Format de la synth√®se :
üéØ Synth√®se de la recherche
[R√©sum√© bref de la demande]

üí´ Experts disponibles :
[Pour chaque expert trouv√© dans les donn√©es :]
- [Pr√©nom Nom] √† [Ville]
  Expertise : [expertises]
  Services : [services pertinents en lien avec la recherche]
  Tarif : [tarif]‚Ç¨
  [Point cl√© de la biographie en lien avec la demande]

‚ö†Ô∏è IMPORTANT : N'inventez PAS d'experts. Utilisez UNIQUEMENT les donn√©es fournies.
`;

const strParser = new StringOutputParser();

// Fonction pour convertir les donn√©es de l'expert
const convertToExpert = (data: any): Expert => {
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
  return {
    id: data.id || 0,
    id_expert: data.id_expert || '',
    nom: data.nom || '',
    prenom: data.prenom || '',
    adresse: data.adresse || '',
    pays: data.pays || '',
    ville: data.ville || '',
    expertises: data.expertises || '',
    specialite: data.specialite,
    biographie: data.biographie || '',
    tarif: data.tarif || 0,
    services: data.services || {},
    created_at: data.created_at || new Date().toISOString(),
    image_url: data.image_url || '',
    url: `${baseUrl}/expert/${data.prenom.toLowerCase()}-${data.nom.toLowerCase()}-${data.id_expert}`.replace(/\s+/g, '-')
  };
};

const createExpertSearchChain = (llm: BaseChatModel) => {
  // Cr√©er le prompt pour l'analyse de la requ√™te
  const searchAnalysisPrompt = ChatPromptTemplate.fromTemplate(ExpertSearchChainPrompt);

  return RunnableSequence.from([
    // 1. Pr√©parer les inputs
    RunnableMap.from({
      query: (input: ExpertSearchChainInput) => input.query || '',
      chat_history: (input: ExpertSearchChainInput) => 
        formatChatHistoryAsString(input.chat_history || []),
    }),
    // 2. Analyser la requ√™te avec le LLM
    RunnableSequence.from([
      searchAnalysisPrompt,
      llm,
      strParser,
    ]),
    // 3. Extraire les crit√®res de recherche
    RunnableLambda.from(async (llmOutput: string) => {
      console.log('ü§ñ Analyse LLM:', llmOutput);
      
      // Extraire expertise, ville et service du r√©sultat LLM
      const expertiseMatch = llmOutput.match(/expertise:\s*(.+)/i);
      const villeMatch = llmOutput.match(/ville:\s*(.+)/i);
      const serviceMatch = llmOutput.match(/service:\s*(.+)/i);
      
      const expertise = expertiseMatch?.[1]?.trim() || '';
      
      // V√©rifier si la valeur de la ville est vide ou contient le mot "service"
      let ville = '';
      if (villeMatch?.[1]) {
        const villeValue = villeMatch[1].trim();
        if (villeValue && !villeValue.toLowerCase().includes('service:')) {
          ville = villeValue;
        }
      }
      
      const service = serviceMatch?.[1]?.trim() || '';
      
      console.log('üìä Crit√®res extraits:', { expertise, ville, service });
      
      return { expertise, ville, service };
    }),
    // 4. Rechercher les experts
    RunnableLambda.from(async (criteria: { expertise: string, ville: string, service: string }) => {
      try {
        console.log('üîç Recherche avec crit√®res:', criteria);

        // Construire la requ√™te de base Supabase
        let query = supabase
          .from('experts')
          .select('*');

        // Accumuler les conditions OR pour expertise et biographie
        const expertiseBioConditions = [];
        if (criteria.expertise) {
          const keywords = criteria.expertise.toLowerCase().split(/\s+/);
          keywords.forEach(keyword => {
            if (keyword.length >= 3) { // √âviter les mots trop courts
              expertiseBioConditions.push(`expertises.ilike.%${keyword}%`);
              expertiseBioConditions.push(`biographie.ilike.%${keyword}%`);
            }
          });
        }
        
        // Appliquer les filtres OR pour expertise et biographie
        if (expertiseBioConditions.length > 0) {
          query = query.or(expertiseBioConditions.join(','));
        }
        
        // Appliquer le filtre de ville en AND
        if (criteria.ville && criteria.ville.length > 0) {
          query = query.ilike('ville', `%${criteria.ville}%`);
        }
        
        // Log de la requ√™te finale
        let queryStringLog = 'Requ√™te initiale';
        if (expertiseBioConditions.length > 0) queryStringLog += ` OR (${expertiseBioConditions.join(',')})`;
        if (criteria.ville) queryStringLog += ` AND ville.ilike.%${criteria.ville}%`;
        console.log('üîç Ex√©cution de la requ√™te Supabase avec filtre:', queryStringLog);

        // Ex√©cuter la requ√™te
        const { data: expertsData, error } = await query.limit(5);

        if (error) {
          console.error('‚ùå Erreur Supabase:', error);
          throw error;
        }
        
        console.log('üîç R√©sultat de la requ√™te experts:', {
          criteres: criteria,
          nbExperts: expertsData?.length || 0
        });

        // Recherche compl√©mentaire dans la table activit√© si aucun r√©sultat n'a √©t√© trouv√©
        if (!expertsData || expertsData.length === 0) {
          try {
            if (criteria.expertise) {
              console.log('üîç Tentative de recherche secondaire dans la table activit√©');
              const keywords = criteria.expertise.toLowerCase().split(/\s+/);
              
              // Pr√©parer une requ√™te distincte pour la table activit√©
              let activiteQuery = supabase.from('activit√©').select('*, experts(*)');
              
              // Filtrer par keywords dans le nom d'activit√©
              const activiteConditions = keywords
                .filter(k => k.length >= 3)
                .map(k => `name.ilike.%${k}%`);
                
              if (activiteConditions.length > 0) {
                activiteQuery = activiteQuery.or(activiteConditions.join(','));
                
                // Ajouter le filtre de ville si n√©cessaire
                if (criteria.ville && criteria.ville.length > 0) {
                  activiteQuery = activiteQuery.eq('experts.ville', criteria.ville);
                }
                
                const { data: activiteResults, error: activiteError } = await activiteQuery.limit(5);
                
                if (!activiteError && activiteResults && activiteResults.length > 0) {
                  console.log('‚úÖ Experts trouv√©s via la table activit√©:', activiteResults.length);
                  
                  // Extraire les experts des r√©sultats de l'activit√©
                  const expertsFromActivite = activiteResults
                    .filter(act => act.experts)
                    .map(act => act.experts);
                  
                  return {
                    experts: expertsFromActivite.map(convertToExpert),
                    synthese: `J'ai trouv√© ${expertsFromActivite.length} experts en ${criteria.expertise}${criteria.ville ? ` √† ${criteria.ville}` : ''}${criteria.service ? ` pour ${criteria.service}` : ''}.`
                  } as ExpertSearchResponse;
                }
              }
            }
          } catch (activiteError) {
            console.error('‚ùå Erreur lors de la recherche secondaire:', activiteError);
          }
          
          // Si nous arrivons ici, aucun r√©sultat n'a √©t√© trouv√©
          return {
            experts: [],
            synthese: `D√©sol√©, je n'ai pas trouv√© d'experts en ${criteria.expertise}${criteria.ville ? ` √† ${criteria.ville}` : ''}${criteria.service ? ` pour ${criteria.service}` : ''}.`
          } as ExpertSearchResponse;
        }

        // Filtrage post-requ√™te pour les services si n√©cessaire
        let experts = expertsData;
        if (criteria.service && experts && experts.length > 0) {
          console.log(`üîç Application du filtre service post-requ√™te pour "${criteria.service}"`);
          const serviceKeywords = criteria.service.toLowerCase().split(/\s+/).filter(k => k.length >= 3);
          console.log(`üîç Mots-cl√©s de service: ${serviceKeywords.join(', ')}`);
          
          // Garder une trace des experts originaux avant filtrage
          const originalExperts = [...experts];
          
          // Appliquer le filtre par service
          const filteredExperts = experts.filter(expert => {
            if (!expert.services) return false;
            const servicesText = JSON.stringify(expert.services).toLowerCase();
            return serviceKeywords.some(keyword => servicesText.includes(keyword));
          });
          
          // Si on a des experts apr√®s filtrage, utiliser ceux-l√†
          if (filteredExperts.length > 0) {
            console.log(`üîç ${filteredExperts.length} experts trouv√©s apr√®s filtrage par service`);
            experts = filteredExperts;
          } else {
            // Sinon, conserver tous les experts d'origine, mais limiter √† 3
            console.log(`‚ö†Ô∏è Aucun expert trouv√© avec les crit√®res de service, retour aux experts d'origine`);
            experts = originalExperts.slice(0, 3);
          }
          
          console.log(`üîç ${experts.length} experts restants apr√®s filtre service post-requ√™te.`);
        }

        // Trier les experts par pertinence
        const sortedExperts = experts.sort((a, b) => {
          // Calcul du score de pertinence pour chaque expert
          let scoreA = calculateRelevanceScore(a, criteria);
          let scoreB = calculateRelevanceScore(b, criteria);
          
          // Tri d√©croissant par score
          return scoreB - scoreA;
        });

        // G√©n√©rer la synth√®se avec le LLM
        const synthesePrompt = PromptTemplate.fromTemplate(ExpertAnalysisPrompt);
        const formattedPrompt = await synthesePrompt.format({
          query: `Recherche d'expert en ${criteria.expertise}${criteria.ville ? ` √† ${criteria.ville}` : ''}${criteria.service ? ` pour ${criteria.service}` : ''}`,
          experts: JSON.stringify(sortedExperts, null, 2)
        });

        const syntheseResponse = await llm.invoke(formattedPrompt);
        const syntheseString = typeof syntheseResponse.content === 'string' 
          ? syntheseResponse.content 
          : JSON.stringify(syntheseResponse.content);

        return {
          experts: sortedExperts.map(convertToExpert),
          synthese: syntheseString
        } as ExpertSearchResponse;

      } catch (error) {
        console.error('‚ùå Erreur dans la recherche:', error);
        return {
          experts: [],
          synthese: "Une erreur est survenue lors de la recherche d'experts."
        } as ExpertSearchResponse;
      }
    }),
  ]);
};

// Fonction pour calculer le score de pertinence d'un expert par rapport aux crit√®res
const calculateRelevanceScore = (expert: any, criteria: { expertise: string, ville: string, service: string }): number => {
  let score = 0;
  
  // V√©rifier l'expertise
  if (criteria.expertise && expert.expertises) {
    const expertiseKeywords = criteria.expertise.toLowerCase().split(/\s+/);
    expertiseKeywords.forEach(keyword => {
      // Match exact dans les expertises
      if (expert.expertises.toLowerCase().includes(keyword)) {
        score += 10;
        console.log(`üéØ Match expertise: +10 points pour ${keyword} dans ${expert.prenom} ${expert.nom}`);
      }
      // Match dans la biographie
      if (expert.biographie && expert.biographie.toLowerCase().includes(keyword)) {
        score += 5;
        console.log(`üéØ Match biographie: +5 points pour ${keyword} dans ${expert.prenom} ${expert.nom}`);
      }
      // Match dans activit√©
      if (expert.activit√© && expert.activit√©.name && expert.activit√©.name.toLowerCase().includes(keyword)) {
        score += 15; // Bonus pour match dans l'activit√© principale
        console.log(`üéØ Match activit√©: +15 points pour ${keyword} dans ${expert.prenom} ${expert.nom}`);
      }
    });
  }
  
  // V√©rifier la ville
  if (criteria.ville && expert.ville && expert.ville.toLowerCase().includes(criteria.ville.toLowerCase())) {
    score += 20; // Forte priorit√© au crit√®re g√©ographique
    console.log(`üéØ Match ville: +20 points pour ${criteria.ville} dans ${expert.prenom} ${expert.nom}`);
  }
  
  // V√©rifier les services
  if (criteria.service && expert.services) {
    const serviceKeywords = criteria.service.toLowerCase().split(/\s+/);
    const servicesText = JSON.stringify(expert.services).toLowerCase();
    
    console.log(`üîç V√©rification services pour ${expert.prenom} ${expert.nom}:`);
    console.log(`   - Services: ${JSON.stringify(expert.services).substring(0, 100)}...`);
    console.log(`   - Recherche: ${criteria.service}`);
    
    serviceKeywords.forEach(keyword => {
      // Match dans le JSON des services
      if (servicesText.includes(keyword)) {
        score += 15;
        console.log(`üéØ Match services JSON: +15 points pour ${keyword} dans ${expert.prenom} ${expert.nom}`);
        
        // Bonus si le mot-cl√© correspond exactement √† une cl√© de service
        if (expert.services && typeof expert.services === 'object') {
          Object.keys(expert.services).forEach(serviceKey => {
            if (serviceKey.toLowerCase().includes(keyword)) {
              score += 10; // Bonus suppl√©mentaire pour match exact sur un service
              console.log(`üéØ Match exact service: +10 points pour ${keyword} dans cl√© ${serviceKey}`);
            }
          });
        }
      }
    });
  }
  
  console.log(`üèÜ Score final pour ${expert.prenom} ${expert.nom}: ${score} points`);
  return score;
};

const handleExpertSearch = async (input: ExpertSearchRequest, llm: BaseChatModel) => {
  try {
    // 1. Analyse de la requ√™te via LLM pour extraire l'expertise, la ville et le service
    const expertSearchChain = createExpertSearchChain(llm);
    const result = await expertSearchChain.invoke({
      query: input.query,
      chat_history: input.chat_history || []
    }) as ExpertSearchResponse;

    return result;

  } catch (error) {
    console.error('‚ùå Erreur dans handleExpertSearch:', error);
    return {
      experts: [],
      synthese: "Une erreur est survenue."
    };
  }
};

export default handleExpertSearch;