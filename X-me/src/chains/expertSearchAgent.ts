import { ChatPromptTemplate, PromptTemplate } from '@langchain/core/prompts';
import { BaseChatModel } from '@langchain/core/language_models/chat_models';
import {
  RunnableLambda,
  RunnableMap,
  RunnableSequence,
} from '@langchain/core/runnables';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { BaseMessage } from '@langchain/core/messages';
import { supabase } from '../db/supabase';
import formatChatHistoryAsString from '../utils/formatHistory';
import { Expert, ExpertSearchRequest, ExpertSearchResponse } from '../types/types';

type ExpertSearchChainInput = {
  chat_history: BaseMessage[];
  query: string;
};

const ExpertSearchChainPrompt = `
Vous √™tes un agent sp√©cialis√© dans l'analyse et la recherche d'experts professionnels. Votre r√¥le est d'interpr√©ter les demandes des utilisateurs et d'extraire les informations essentielles pour trouver l'expert le plus pertinent.

OBJECTIF :
Analyser la requ√™te pour identifier pr√©cis√©ment :
1. Le domaine d'expertise recherch√©
2. La localisation souhait√©e (si mentionn√©e)

R√àGLES D'EXTRACTION :
- Pour l'EXPERTISE :
  * Identifier le domaine principal (comptabilit√©, droit, marketing, etc.)
  * Reconna√Ætre les sp√©cialisations (droit des affaires, marketing digital, etc.)
  * Nettoyer les mots parasites (expert, sp√©cialiste, professionnel, etc.)
  * Extraire les mots-cl√©s pertinents pour la recherche
  * Prendre en compte les synonymes et variations

- Pour la VILLE :
  * Si mentionn√©e
  * Extraire la ville mentionn√©e
  * Ignorer si non sp√©cifi√©e
  * Standardiser le format (tout en minuscules)

FORMAT DE R√âPONSE STRICT :
R√©pondre en deux lignes exactement :
expertise: [domaine d'expertise]
ville: [ville si mentionn√©e]

EXEMPLES D'ANALYSE :

1. "Je cherche un expert comptable sur Paris"
expertise: comptabilit√©
ville: paris

2. "Il me faudrait un avocat sp√©cialis√© en droit des affaires √† Lyon"
expertise: droit des affaires
ville: lyon

3. "Qui peut m'aider avec le marketing digital ?"
expertise: marketing digital
ville: 

4. "Je cherche quelqu'un pour m'aider √† cr√©er mon entreprise"
expertise: cr√©ation d'entreprise
ville: 

Conversation pr√©c√©dente :
{chat_history}

Requ√™te actuelle : {query}

Principe de recherche d'expert :
- Pour toute recherche d'expert, extraire UNIQUEMENT :
  * L'expertise demand√©e (avec ses variations et synonymes)
  * La ville (si mentionn√©e)

- Mots d√©clencheurs √† reconna√Ætre :
  * "cherche un expert/sp√©cialiste/consultant"
  * "besoin d'un professionnel"
  * "recherche quelqu'un pour"
  * "qui peut m'aider avec"
  * "conseil en"
  * "assistance pour"
  * "accompagnement dans"

- Domaines d'expertise √† reconna√Ætre :
  * Cr√©ation d'entreprise (entrepreneuriat, lancement d'activit√©, etc.)
  * Comptabilit√© (gestion comptable, fiscalit√©, etc.)
  * Marketing (digital, traditionnel, strat√©gie, etc.)
  * Droit (des affaires, commercial, fiscal, etc.)
  * Finance (gestion financi√®re, investissement, etc.)
  * Strat√©gie (d√©veloppement, business plan, etc.)
  * RH (ressources humaines, recrutement, etc.)
  * Communication (relations publiques, m√©dias, etc.)

<example>
\`<query>
Je cherche un expert comptable
</query>
expertise: comptabilit√©
ville: 
\`

\`<query>
J'ai besoin d'un sp√©cialiste en droit des soci√©t√©s √† Lyon
</query>
expertise: droit des soci√©t√©s
ville: lyon
\`

\`<query>
Qui peut m'aider avec ma comptabilit√© sur Paris ?
</query>
expertise: comptabilit√©
ville: paris
\`
</example>
`;

const ExpertAnalysisPrompt = `
Vous devez g√©n√©rer une synth√®se des experts trouv√©s en vous basant UNIQUEMENT sur les donn√©es fournies.

Contexte de la recherche : {query}

Experts trouv√©s (√† utiliser EXCLUSIVEMENT) :
{experts}

Format de la synth√®se :
üéØ Synth√®se de la recherche
[R√©sum√© bref de la demande]

üí´ Experts disponibles :
[Pour chaque expert trouv√© dans les donn√©es :]
- [Pr√©nom Nom] √† [Ville]
  Expertise : [expertises]
  Tarif : [tarif]‚Ç¨
  [Point cl√© de la biographie]

‚ö†Ô∏è IMPORTANT : N'inventez PAS d'experts. Utilisez UNIQUEMENT les donn√©es fournies.
`;

const strParser = new StringOutputParser();

// Fonction pour convertir les donn√©es de l'expert
const convertToExpert = (data: any): Expert => {
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
  return {
    id: data.id || 0,
    id_expert: data.id_expert || '',
    nom: data.nom || '',
    prenom: data.prenom || '',
    adresse: data.adresse || '',
    pays: data.pays || '',
    ville: data.ville || '',
    expertises: data.expertises || '',
    specialite: data.specialite,
    biographie: data.biographie || '',
    tarif: data.tarif || 0,
    services: data.services || {},
    created_at: data.created_at || new Date().toISOString(),
    image_url: data.image_url || '',
    url: `${baseUrl}/expert/${data.prenom.toLowerCase()}-${data.nom.toLowerCase()}-${data.id_expert}`.replace(/\s+/g, '-')
  };
};

const createExpertSearchChain = (llm: BaseChatModel) => {
  // Cr√©er le prompt pour l'analyse de la requ√™te
  const searchAnalysisPrompt = ChatPromptTemplate.fromTemplate(ExpertSearchChainPrompt);

  return RunnableSequence.from([
    // 1. Pr√©parer les inputs
    RunnableMap.from({
      query: (input: ExpertSearchChainInput) => input.query || '',
      chat_history: (input: ExpertSearchChainInput) => 
        formatChatHistoryAsString(input.chat_history || []),
    }),
    // 2. Analyser la requ√™te avec le LLM
    RunnableSequence.from([
      searchAnalysisPrompt,
      llm,
      strParser,
    ]),
    // 3. Extraire les crit√®res de recherche
    RunnableLambda.from(async (llmOutput: string) => {
      console.log('ü§ñ Analyse LLM:', llmOutput);
      
      // Extraire expertise et ville du r√©sultat LLM
      const expertiseMatch = llmOutput.match(/expertise:\s*(.+)/i);
      const villeMatch = llmOutput.match(/ville:\s*(.+)/i);
      
      const expertise = expertiseMatch?.[1]?.trim() || '';
      const ville = villeMatch?.[1]?.trim() || '';
      
      console.log('üìä Crit√®res extraits:', { expertise, ville });
      
      return { expertise, ville };
    }),
    // 4. Rechercher les experts
    RunnableLambda.from(async (criteria: { expertise: string, ville: string }) => {
      try {
        console.log('üîç Recherche avec crit√®res:', criteria);

        // Construire la requ√™te Supabase
        let query = supabase
          .from('experts')
          .select('*');

        // Ajouter les conditions de recherche
        if (criteria.expertise) {
          // S√©parer les mots de l'expertise
          const keywords = criteria.expertise.toLowerCase().split(/\s+/);
          
          // Construire la requ√™te pour chaque mot-cl√©
          keywords.forEach(keyword => {
            query = query.or(`expertises.ilike.%${keyword}%,biographie.ilike.%${keyword}%`);
          });
        }

        // Ajouter le filtre de ville si sp√©cifi√©
        if (criteria.ville) {
          query = query.ilike('ville', `%${criteria.ville}%`);
        }

        // Ex√©cuter la requ√™te
        const { data: experts, error } = await query.limit(5);

        console.log('üîç R√©sultat de la requ√™te experts:', {
          criteres: criteria,
          nbExperts: experts?.length || 0,
          error: error?.message
        });

        if (error) {
          console.error('‚ùå Erreur Supabase:', error);
          throw error;
        }

        if (!experts || experts.length === 0) {
          return {
            experts: [],
            synthese: `D√©sol√©, je n'ai pas trouv√© d'experts en ${criteria.expertise}${criteria.ville ? ` √† ${criteria.ville}` : ''}.`
          } as ExpertSearchResponse;
        }

        // G√©n√©rer la synth√®se avec le LLM
        const synthesePrompt = PromptTemplate.fromTemplate(ExpertAnalysisPrompt);
        const formattedPrompt = await synthesePrompt.format({
          query: `Recherche d'expert en ${criteria.expertise}${criteria.ville ? ` √† ${criteria.ville}` : ''}`,
          experts: JSON.stringify(experts, null, 2)
        });

        const syntheseResponse = await llm.invoke(formattedPrompt);
        const syntheseString = typeof syntheseResponse.content === 'string' 
          ? syntheseResponse.content 
          : JSON.stringify(syntheseResponse.content);

        return {
          experts: experts.map(convertToExpert),
          synthese: syntheseString
        } as ExpertSearchResponse;

      } catch (error) {
        console.error('‚ùå Erreur dans la recherche:', error);
        return {
          experts: [],
          synthese: "Une erreur est survenue lors de la recherche d'experts."
        } as ExpertSearchResponse;
      }
    }),
  ]);
};

const handleExpertSearch = async (input: ExpertSearchRequest, llm: BaseChatModel) => {
  try {
    // 1. Analyse de la requ√™te via LLM pour extraire l'expertise et la ville
    const expertSearchChain = createExpertSearchChain(llm);
    const result = await expertSearchChain.invoke({
      query: input.query,
      chat_history: input.chat_history || []
    }) as ExpertSearchResponse; // Le r√©sultat est d√©j√† une ExpertSearchResponse

    // Pas besoin de retraiter la r√©ponse car createExpertSearchChain fait d√©j√† tout le travail
    return result;

  } catch (error) {
    console.error('‚ùå Erreur dans handleExpertSearch:', error);
    return {
      experts: [],
      synthese: "Une erreur est survenue."
    };
  }
};

export default handleExpertSearch;