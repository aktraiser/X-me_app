import OpenAI from 'openai';
import cache from '../utils/cache';
import { getOpenaiApiKey } from '../config';
import logger from '../utils/logger';

interface SuggestionSource {
  type: 'static' | 'dynamic' | 'ai';
  priority: number;
  data?: string[];
}

const BUSINESS_QUESTIONS = {
  creation: [
    "Quel statut juridique convient le mieux √† mon activit√© (EI, SASU, SARL, etc.) ?",
    "Quelles sont les d√©marches administratives pour immatriculer mon entreprise ?",
    "Quels documents sont n√©cessaires pour cr√©er une entreprise ?",
    "Comment r√©aliser une √©tude de march√© pour valider mon id√©e ?",
    "Comment structurer mon business plan ?",
    "Comment prot√©ger mon id√©e ou ma marque (d√©p√¥t √† l'INPI, brevet) ?",
    "Quels sont les organismes publics ou priv√©s qui peuvent m'accompagner ?",
    "Comment √©tablir une strat√©gie pour capter mes premiers clients ?"
  ],
  financement: [
    "Quels types de financements sont adapt√©s √† mon projet ?",
    "Comment maximiser mes chances de r√©ussite pour une lev√©e de fonds ?",
    "Quelles aides publiques ou subventions sont disponibles pour mon secteur d'activit√© ?",
    "Comment estimer mon besoin en fonds de roulement (BFR) ?",
    "Comment pr√©senter mon pr√©visionnel financier de mani√®re convaincante ?"
  ],
  fiscal: [
    "Quels sont les r√©gimes fiscaux disponibles et lequel choisir ?",
    "Comment facturer et d√©clarer la TVA selon mon activit√© ?",
    "Quelles charges sociales dois-je pr√©voir selon mon statut ?",
    "Comment calculer mon imp√¥t sur le revenu ou sur les soci√©t√©s ?",
    "Quelles sont les exon√©rations ou cr√©dits d'imp√¥t disponibles ?"
  ],
  commercial: [
    "Comment trouver mes premiers clients ?",
    "Quelles strat√©gies pour attirer des prospects qualifi√©s ?",
    "Comment √©laborer une offre qui r√©pond aux attentes des clients ?",
    "Quel prix fixer pour mes produits ou services ?",
    "Comment construire une image de marque forte ?"
  ],
  organisation: [
    "Comment organiser mon emploi du temps pour √™tre plus productif ?",
    "Quand et comment recruter mon premier salari√© ?",
    "Comment structurer et documenter mes processus internes ?",
    "Comment g√©rer mon temps entre la gestion quotidienne et le d√©veloppement ?",
    "Comment anticiper et g√©rer les p√©riodes creuses ou d'activit√© intense ?"
  ]
};

export class SuggestionService {
  private static instance: SuggestionService;
  private openai: OpenAI;
  private sources: SuggestionSource[] = [];

  private constructor() {
    this.openai = new OpenAI({
      apiKey: getOpenaiApiKey(),
    });
    // Source statique regroupant l'ensemble des questions business
    this.sources.push({
      type: 'static',
      priority: 1,
      data: Object.values(BUSINESS_QUESTIONS).flat()
    });
  }

  public static getInstance(): SuggestionService {
    if (!SuggestionService.instance) {
      SuggestionService.instance = new SuggestionService();
    }
    return SuggestionService.instance;
  }

  // Appel √† l'API OpenAI pour g√©n√©rer des suggestions
  private async getAISuggestions(input: string): Promise<string[]> {
    try {
      logger.info(`ü§ñ G√©n√©ration de suggestions IA pour l'entr√©e: "${input.substring(0, 30)}..."`);
      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [{
          role: "system",
          content: `Vous √™tes un expert en business et accompagnement d'entreprise. 
          √Ä partir du d√©but de la phrase de l'utilisateur, fournissez une liste d'au maximum 5 suggestions de questions que l'utilisateur pourrait poser.
          Les questions doivent √™tre formul√©es √† la premi√®re personne, comme si l'utilisateur les posait lui-m√™me. Par exemple :
          - "Comment puis-je r√©aliser une √©tude de march√© ?" (et non pas "Avez-vous r√©alis√© une √©tude de march√© ?")
          - "Quel statut juridique dois-je choisir ?" (et non pas "Quel statut juridique envisagez-vous ?")
          
          Les suggestions doivent √™tre pertinentes, concises et directement utilisables par l'utilisateur pour obtenir des informations.
          Chaque suggestion doit √™tre une question compl√®te se terminant par un point d'interrogation.`
        }, {
          role: "user",
          content: input
        }],
        temperature: 0.7,
        max_tokens: 60
      });

      const rawSuggestions = completion.choices[0].message.content
        .split('\n')
        .map(s => s.trim())
        .filter(s => s.length > 0);

      // Nettoyer et filtrer les suggestions afin de ne garder que des questions concises
      const aiSuggestions = rawSuggestions
        .map(s => s.replace(/^\d+\.\s*/, ''))
        .filter(s => s.endsWith('?') && s.length < 150)
        .slice(0, 5);

      logger.info(`‚úÖ ${aiSuggestions.length} suggestions IA g√©n√©r√©es avec succ√®s`);
      return aiSuggestions;
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la g√©n√©ration AI: ${error.message}`);
      console.error('Erreur d√©taill√©e lors de la g√©n√©ration AI:', error);
      return [];
    }
  }

  // R√©cup√®re les suggestions en combinant les sources statiques et, si n√©cessaire, l'IA
  public async getSuggestions(input: string): Promise<string[]> {
    try {
      if (!input || input.trim().length === 0) {
        logger.info(`‚ö†Ô∏è Entr√©e vide, aucune suggestion retourn√©e`);
        return [];
      }

      const cacheKey = `suggestions:${input}`;
      logger.info(`üîç Recherche dans le cache pour la cl√©: ${cacheKey}`);
      
      // V√©rifier le cache
      try {
        const cachedSuggestions = await cache.get(cacheKey);
        if (cachedSuggestions) {
          logger.info(`‚úÖ Suggestions trouv√©es dans le cache`);
          return cachedSuggestions as string[];
        }
        logger.info(`‚ÑπÔ∏è Aucune suggestion en cache, g√©n√©ration requise`);
      } catch (cacheError) {
        logger.error(`‚ùå Erreur lors de l'acc√®s au cache: ${cacheError.message}`);
      }

      const inputLower = input.toLowerCase().trim();
      let suggestions: string[] = [];

      // Filtrer les suggestions statiques
      if (this.sources.length > 0 && this.sources[0].data) {
        logger.info(`üîç Filtrage des suggestions statiques pour "${inputLower}"`);
        suggestions = this.sources
          .find(s => s.type === 'static')
          ?.data
          ?.filter(s => {
            const cleanedSuggestion = s.replace(/^(entreprise|cr√©ation|financement|fiscal|commercial|organisation)\s*:\s*/i, '').trim();
            return cleanedSuggestion.toLowerCase().startsWith(inputLower) &&
                 cleanedSuggestion.endsWith('?') &&
                 cleanedSuggestion.length < 150;
          }) || [];
        logger.info(`‚úÖ ${suggestions.length} suggestions statiques trouv√©es`);
      }

      // Si le nombre de suggestions statiques est insuffisant ou pour certains d√©buts sp√©cifiques, on compl√®te avec l'IA
      if (
        suggestions.length < 5 ||
        inputLower.startsWith('comment') ||
        inputLower.startsWith('quelles') ||
        inputLower.startsWith('quels') ||
        inputLower.startsWith('pourquoi')
      ) {
        logger.info(`ü§ñ Compl√©tion avec l'IA requise (${suggestions.length} suggestions statiques insuffisantes)`);
        const aiSuggestions = await this.getAISuggestions(input);
        suggestions = [...suggestions, ...aiSuggestions];
        logger.info(`‚úÖ Total apr√®s ajout IA: ${suggestions.length} suggestions`);
      }

      const uniqueSuggestions = [...new Set(suggestions)]
        .filter(s => s && s.length > 0)
        .slice(0, 6);

      logger.info(`üî¢ ${uniqueSuggestions.length} suggestions uniques apr√®s d√©duplication`);

      // Mise en cache pendant 5 minutes
      try {
        await cache.set(cacheKey, uniqueSuggestions, 300);
        logger.info(`‚úÖ Suggestions mises en cache avec TTL de 300 secondes`);
      } catch (cacheError) {
        logger.error(`‚ùå Erreur lors de la mise en cache: ${cacheError.message}`);
      }
      
      return uniqueSuggestions;
    } catch (error) {
      logger.error(`‚ùå Erreur g√©n√©rale dans getSuggestions: ${error.message}`);
      console.error('Erreur d√©taill√©e dans getSuggestions:', error);
      return [];
    }
  }
}

export const suggestionService = SuggestionService.getInstance();